laravel mai users table mai ye table ka hona lzmi hay
table: personal_access_tokens
<?php

namespace App\Http\Controllers\api;
use App\Http\Controllers\Controller;

use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;


class AuthApiController extends Controller
{
    
    // register
    public function register(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'name'     => 'required|string|max:255',
            'email'    => 'required|email|unique:users',
            'username' => 'required|string|unique:users',
            'phone'    => 'required|string',
            'password' => 'required|min:6|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        $user = User::create([
            'name'     => $request->name,
            'email'    => $request->email,
            'username' => $request->username,
            'phone'    => $request->phone,
            'password' => Hash::make($request->password),
        ]);

        Auth::login($user);

        return response()->json([
            'status'  => 'success',
            'message' => 'Registration successful',
        ]);
    }


// login user
    // public function login(Request $request)
    // {
    //     $validator = \Validator::make($request->all(), [
    //         'email'    => 'required|email',
    //         'password' => 'required',
    //     ]);

    //     if ($validator->fails()) {
    //         return response()->json([
    //             'status' => 'error',
    //             'errors' => $validator->errors()
    //         ], 422);
    //     }

    //     if (Auth::attempt($request->only('email', 'password'))) {
    //         $user = Auth::user();
    //     $token = $user->createToken('mobile_app_token')->plainTextToken;
    //         return response()->json([
    //             'status'  => 'success',
    //             'message' => 'Login successful',
    //             'token'=> $token,
    //             'user' => $user
    //         ]);
    //     }

    //     return response()->json([
    //         'status' => 'error',
    //         'errors' => ['email' => ['Invalid credentials.']],
            
    //     ], 401);
    // }


public function login(Request $request)
{
    $validator = Validator::make($request->all(), [
        'email'    => 'required|email',
        'password' => 'required',
    ]);

    if ($validator->fails()) {
        return response()->json([
            'status' => 'error',
            'errors' => $validator->errors()
        ], 422);
    }

    if (!Auth::attempt($request->only('email', 'password'))) {
        return response()->json([
            'status' => 'error',
            'message' => 'Invalid credentials.'
        ], 401);
    }

    $user = Auth::user();
    $token = $user->createToken('mobile_app_token')->plainTextToken;
 
    return response()->json([
        'status'  => 'success',
        'message' => 'Login successful',
        'token'   => $token,
        'user'    => $user
    ]);
}

    
    // edir profile
    public function editProfile($id){
        $user=User::find($id);
        if($user){
              return response()->json([
            'success'=>true,
            'message'=>'Record find successfully.',
            'user'=>$user,
            ],200);
        }
        return response()->json([
            'success'=>false,
            'message'=>'No record find.',
            'user'=>$user,
            ]);
        
    }
    
    
    // update profile

public function updateProfile(Request $request, $id)
{
    $validator = Validator::make($request->all(), [
        'name'     => 'required|string|max:255',
        'email'    => 'required|email|unique:users,email,' . $id,
        'username' => 'required|string|unique:users,username,' . $id,
        'phone'    => 'required|string',
        'password' => 'nullable|min:6|confirmed', // password is optional
    ]);

    if ($validator->fails()) {
        return response()->json([
            'status' => 'error',
            'errors' => $validator->errors()
        ], 422);
    }

    $user = User::find($id);

    if (!$user) {
        return response()->json([
            'success' => false,
            'message' => 'No record found.',
            'user'    => null,
        ], 404);
    }

    // Update fields
    $user->name     = $request->name;
    $user->email    = $request->email;
    $user->username = $request->username;
    $user->city     = $request->city ?? $user->city;
    $user->phone    = $request->phone;

    if ($request->filled('password')) {
        $user->password = Hash::make($request->password);
    }
  
    $user->save();

    return response()->json([
        'success' => true,
        'message' => 'Record updated successfully.',
        'user'    => $user,
    ], 200);
}


    
}



using guard login
// 	Api for mobile app

public function studentLogin(Request $request) 
{
    // Validate the request inputs
    $validator = Validator::make($request->all(), [
        'email' => 'required|email',  
        'password' => 'required',
    ]);

    if ($validator->fails()) {
        return response()->json([
            'success' => false,
            'message' => $validator->errors(),
        ], 400);
    }


    // Attempt login using 'student' guard
    if (Auth::guard('student')->attempt($request->only('email', 'password'), $request->filled('remember'))) {

        // Generate an API token using Laravel Sanctum
        $student = Auth::guard('student')->user(); 
        $token = $student->createToken('student-login-token')->plainTextToken;

        // Define base URL
        $base_url = 'https://basicdemo.k-hub.ac/uploads/student/';

        // Append base URL to the photo field and return it in the response
        $student->photo = $base_url . $student->photo;

        // Return response with token, full student data, and base URL
        return response()->json([
            'success' => true,
            'access_token' => $token,
            'token_type' => 'Bearer',
            'student' => $student,
            'message' => 'Student Logged In Successfully!',
        ]);
    }

    // If login fails, return an error response
    return response()->json([
        'success' => false,
        'message' => 'Invalid email or password.',
    ], 401);
}
